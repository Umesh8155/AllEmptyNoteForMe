public void copyDataBase() throws IOException {

        //InputStream myInput = new FileInputStream(sqLiteDatabase.getPath());
        InputStream myInput = context.getAssets().open("databasename_db.db"); //assets database name

        // Path to the just created empty db
        String outFileName = context.getDatabasePath(DATABASE_NAME).toString();

        //Open the empty db as the output stream
        OutputStream myOutput = new FileOutputStream(outFileName);

        //transfer bytes from the inputfile to the outputfile
        byte[] buffer = new byte[1024];
        int length;
        while ((length = myInput.read(buffer)) > 0) {
            myOutput.write(buffer, 0, length);
        }

        //Close the streams
        myOutput.flush();
        myOutput.close();
        myInput.close();

}

//encrypted databse
public static void encFile(String DbPath, String pathToEncrpt) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException {

        private static final String KEY_DATABASE = "password";        

        byte[] s = Arrays.copyOf(KEY_DATABASE.getBytes(), 16);
        SecretKeySpec sks = new SecretKeySpec(s, "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
        cipher.init(Cipher.ENCRYPT_MODE, sks);
        File f = new File(pathToEncrpt);
        if (!f.exists()) {
            f.createNewFile();
        }
        FileOutputStream outputStream = new FileOutputStream(pathToEncrpt);
        outputStream.write(cipher.getIV()); // store the generated IV

        CipherOutputStream cos = new CipherOutputStream(outputStream, cipher);
        FileInputStream fileInputStream = new FileInputStream(DbPath);
        int length;
        byte[] buffer = new byte[1024];
        while ((length = fileInputStream.read(buffer)) != -1) {
            cos.write(buffer, 0, length);
        }

       //Fecha as streams
        cos.flush();
        cos.close();
        fileInputStream.close();
}

//read and copy encrypted databse
public void copyDataBase() throws Exception {

        private static final String KEY_DATABASE = "password";

        // Path to the just created empty db
        InputStream fis = context.getAssets().open("astropanchang_ahmedabad.enc");
        String outFileName = context.getDatabasePath(DATABASE_NAME).toString();

        //Open the empty db as the output stream
        OutputStream fos = new FileOutputStream(outFileName);
        byte[] iv = new byte[16]; // 16 is the block size of AES
        if (fis.read(iv) != 16) {
            throw new Exception("Incomplete IV"); // TODO: rename to a different exception
        }

        byte[] s = Arrays.copyOf(KEY_DATABASE.getBytes(), 16);
        SecretKeySpec sks = new SecretKeySpec(s, "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
        cipher.init(Cipher.DECRYPT_MODE, sks, new IvParameterSpec(iv));

        CipherInputStream cis = new CipherInputStream(fis, cipher);

        byte[] buffer = new byte[1024];
        int length;
        while ((length = cis.read(buffer)) != -1) {
            fos.write(buffer, 0, length);
        }
        fos.flush();
        fos.flush();
        fos.close();
        cis.close();

}